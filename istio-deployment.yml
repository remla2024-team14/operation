apiVersion: v1                        # NOTE: this resource definition has nothing to do with your deployment
kind: Pod
metadata:
  name: model-service
  labels: { app: model-service, version: v1 }    # Can be used later to define subsets e.g.
spec:
  containers:
  - name: model-service
    image: ghcr.io/remla2024-team14/model-serving:latest
    imagePullPolicy: Always
    ports: [ containerPort: 4000 ] 
---
apiVersion: v1 
kind: Pod
metadata:
  name: app-v1
  labels: { app: app, version: v1 } 
spec:
  # template:                         # TODO: Justin: Instruct Istio to include custom metrics from the containers
  #   metadata:
  #     annotations:
  #       prometheus.io/scrape: "true"
  #       prometheus.io/port: "3000"
  containers:
  - name: app
    # Temp test image: ghcr.io/remla2024-team14/model-serving:latest
    image: ghcr.io/remla2024-team14/app:latest        # TODO: Dani, Justin: ensure the images built for the 2 versions correspond
    imagePullPolicy: Always
    ports: [ containerPort: 3000 ]
    env:
      - { name: MODEL_HOST, value: http://fishing-model-serv:5000/predict }   
---
apiVersion: v1 
kind: Pod
metadata:
  name: app-v2
  labels: { app: app, version: v2 } 
spec:
  # template:                         # TODO: Justin: Instruct Istio to include custom metrics from the containers
  #   metadata:
  #     annotations:
  #       prometheus.io/scrape: "true"
  #       prometheus.io/port: "3000"
  containers:
  - name: app
    # Temp test image: ghcr.io/remla2024-team14/model-serving:latest
    image: ghcr.io/remla2024-team14/app:latest      # TODO: Dani, Justin: ensure the images built for the 2 versions correspond
    imagePullPolicy: Always
    ports: [ containerPort: 3000 ]
    env:
      - { name: MODEL_HOST, value: http://fishing-model-serv:5000/predict }
---                                  # We need to define 2 Services to make the services accessible
apiVersion: v1
kind: Service
metadata: { name: model-service } 
spec:
  selector:
    app: model-service              # Since version is unspecified, we need DestinationRule to define the 2 subsets v1 and v2
  ports:
    - { name: http, port: 4000, targetPort: 4000 }
---
apiVersion: v1 
kind: Service 
metadata:
  name: app
spec:
  selector: 
    app: app
  ports:
    - { name: http, port: 3000, targetPort: 3000 }
---                                   # Link Gateway to IngressGateway (created on install)
apiVersion: networking.istio.io/v1beta1 
kind: Gateway
metadata:
  name: fishing-gateway 
spec:
  selector:
    istio: ingressgateway             # Default selector
  servers:  
    - port: { number: 80, name: http, protocol: HTTP }    # Listen on port 80 
      hosts: [ "*" ]      
---                                   # Connect Kubernetes Service with Istio Gateway
apiVersion: networking.istio.io/v1beta1 
kind: VirtualService
metadata:
  name: fishing-entry-service 
spec:
  gateways: [ fishing-gateway ]            # Gateway defined above
  hosts: [ "*" ]
  http:
    - match:
      - uri:
          prefix: /                   # All reqs will be forwarded to the app Service (could be more advanced)
      route:
        - destination: 
            host: app
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: model-dr
spec:
  host: model-service 
  subsets:                    # Subset names don't need to match the label selectors, but it's more clear
    - name: v1
      labels: { version: v1 }
    - name: v2
      labels: { version: v2 }
---             # Config for Canary Release: change routing policies for App as well
apiVersion: networking.istio.io/v1beta1 
kind: DestinationRule
metadata:
  name: app-dr 
spec:
  host: app 
  subsets:
    - name: v1
      labels: { version: v1 }    # Can be used by VirtualServices to filter requests
    - name: v2
      labels: { version: v2 }
---                           # VirtualService to enable more advanced routing control by Kubernetes service
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: fishing-entry-service
spec:
  gateways: [ fishing-gateway ]
  hosts: [ "*" ] 
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination: { host: app, subset: v1 }
      weight: 90
    - destination: { host: app, subset: v2 }
      weight: 10