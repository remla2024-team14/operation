apiVersion: apps/v1     # Create deployment for image operation-app
kind: Deployment
metadata: 
  name: fishing-web-depl 
  labels: 
    app: fishing-web
spec: 
  replicas: {{ .Values.urlfishing.app.replicas }}
  selector: 
    matchLabels: 
      app: fishing-web
  template: 
    metadata: 
      labels: 
        app: fishing-web
    spec: 
      containers: 
      - name: fishing-web 
        image: ghcr.io/remla2024-team14/app:latest
        imagePullPolicy: Always
        ports: 
        - containerPort: {{ .Values.urlfishing.app.port }}
        env: 
          - name: MODEL_HOST
            valueFrom:
              configMapKeyRef: 
                name: my-config   # See ConfigMap defined at bottom
                key: model.host
      imagePullSecrets:
        -  name: ghcr-login-secret
---
apiVersion: v1     # Create service for image operation-app
kind: Service
metadata: 
  name: fishing-web-serv
spec:
  selector: 
    app: fishing-web   # App defined in Deployment above
  ports: 
    - port: {{ .Values.urlfishing.app.port }}
      targetPort: {{ .Values.urlfishing.app.port }}
---
apiVersion: networking.k8s.io/v1   # Create an Ingress for the application (to expose the ClusterIP service)
kind: Ingress
metadata: 
  name: my-ingress
spec: 
  defaultBackend:
    service: 
      name: fishing-web-serv 
      port: 
        number: {{.Values.urlfishing.app.port}}
---
apiVersion: v1   # Create a ConfigMap and introduce the required env vars in the "app" deployment
kind: ConfigMap
metadata: 
  name: my-config
data:
  model.host: {{.Values.urlfishing.model.host}}
# ---
# apiVersion: monitoring.coreos.com/v1   # Extension to allows for service discovery feature of Prometheus
# kind: ServiceMonitor
# metadata:
#   name: app-monitoring
#   labels: 
#     release: app-prom      # For discovery of ServiceMonitor by Prometheus
# spec:
#   selector: 
#     matchLabels: 
#       app: fishing-web-serv
#   endpoints:
#   - interval: 1s           # In production, this value would be higher
